/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include "keys_pt.h"

/ {
    // -------------------unsplithk---------------------------------------
    // |    |  0 |  1 |  2 |  3 |  4 | |  5 |  6 |  7 |  8 |  9 |    |
    // | 10 | 11 | 12 | 13 | 14 | 15 | | 16 | 17 | 18 | 19 | 20 | 21 |
    // |    | 22 | 23 | 24 | 25 | 26 | | 27 | 28 | 29 | 30 | 31 |    |
    // |    |    |    | 32 | 33 | 34 | | 35 | 36 | 37 |    |    |    |

    combos {
        compatible = "zmk,combos";

        lessthan {
            bindings = <&kp PT_LESS_THAN>;
            key-positions = <1 2>;
        };

        openbrace {
            bindings = <&kp PT_LEFT_BRACE>;
            key-positions = <2 3>;
        };

        openparent {
            bindings = <&kp PT_LEFT_PARENTHESIS>;
            key-positions = <24 25>;
        };

        openbraket {
            bindings = <&kp PT_LEFT_BRACKET>;
            key-positions = <23 24>;
        };

        closebrace {
            bindings = <&kp PT_RIGHT_BRACE>;
            key-positions = <6 7>;
        };

        closegreater {
            bindings = <&kp PT_GREATER_THAN>;
            key-positions = <7 8>;
        };

        closeparent {
            bindings = <&kp PT_RIGHT_PARENTHESIS>;
            key-positions = <28 29>;
        };

        closebrack {
            bindings = <&kp PT_RIGHT_BRACKET>;
            key-positions = <29 30>;
        };

        bluetoothlayer {
            bindings = <&mo 6>;
            key-positions = <35 36 37>;
        };

        mo_func {
            bindings = <&mo 5>;
            key-positions = <33 36>;
        };

        none_layer {
            bindings = <&to 7>;
            key-positions = <10 21>;
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 27 28 29 30 31>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        sfthold: sticky_or_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_OR_HOLD";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "balanced";
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOES_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
     
        stikfun: stikfun {
            compatible = "zmk,behavior-hold-tap";
            label = "STIKFUN";
            bindings = <&lt>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <180>;
            flavor = "hold-preferred";
            hold-while-undecided;
        };

        fun_layer: fun_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "FUN_LAYER";
            #binding-cells = <0>;
            bindings = <&sl 5>, <&mo 5>, <&tog 5>;
        };

        td_hold_tap: td_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "TD_HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26>;
        };

        my_triple_function: my_triple_function {
            compatible = "zmk,behavior-tap-dance";
            label = "MY_TRIPLE_FUNCTION";
            #binding-cells = <0>;
            bindings = <&td_hold_tap LCTRL ENTER>, <&mo 5>, <&sl 5>;

            tapping-term-ms = <170>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |       |
            // | ESC   |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   Ã‡   |  DEL  |
            // |       |  Z  |  X  |  C   |  V   |  B   |                   |  N   |  M    |  ,    |  .   |   -   |       |
            //                     | CTRL | SPC  | MOUS |                   | RSE  |  ENT  |  SPC  |

            bindings = <
               &kp Q        &kp W         &kp E                &kp R         &kp T                    &kp Y        &kp U               &kp I                           &kp O            &kp P                   
&kp ESC        &hml LWIN A  &hml LALT S   &hml LCTRL D         &hml LSHFT F  &kp G                    &kp H        &hmr RIGHT_SHIFT J  &hmr RCTRL K                    &hmr LEFT_ALT L  &hmr RWIN PT_C_CEDILLA  &kp DEL
               &kp Z        &kp X         &kp C                &kp V         &kp B                    &kp N        &kp M               &kp COMMA                       &kp DOT          &kp SLASH
                                          &my_triple_function  &lt 1 SPACE   &lt 3 TAB                &lt 4 ENTER  &lt 2 BACKSPACE     &sfthold LEFT_SHIFT LEFT_SHIFT
            >;
        };

        arrows {
            bindings = <
            &trans        &kp LC(RA(LEFT))        &kp LC(LA(RIGHT))  &trans          &trans                 &kp LS(LC(Z))  &kp LC(V)  &kp LC(C)       &kp LC(X)     &kp LC(Z)
&kp ESCAPE  &kp LEFT_GUI  &kp LEFT_ALT            &kp LEFT_CONTROL   &kp LEFT_SHIFT  &trans                 &kp CLCK       &kp LEFT   &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &kp DEL
            &kp LC(Z)     &kp LC(X)               &kp LC(C)          &kp LC(V)       &kp LC(LS(Z))          &kp INS        &kp HOME   &kp PAGE_DOWN   &kp PAGE_UP   &kp END  
                                                  &trans             &trans          &trans                 &trans         &trans     &trans
            >;
        };

        num {
            bindings = <
        &kp COMMA     &kp N7  &kp N8  &kp N9     &kp PT_FSLH           &trans  &trans     &trans     &trans    &trans   
&trans  &kp PT_MINUS  &kp N4  &kp N5  &kp N6     &kp PT_PLUS           &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp LGUI  &trans
        &kp PT_EQUAL  &kp N1  &kp N2  &kp N3     &kp PT_ASTRK          &trans  &trans     &trans     &kp RALT  &trans 
                      &trans  &trans                                                      &trans     &trans
                              &trans  &kp PT_N0  &kp PERIOD            &trans  &trans     &trans
            >;
        };

        mouse {
            bindings = <
         &trans     &trans     &kp LC(E)  &trans     &trans                 &kp LS(LC(Z))       &kp LC(V)       &kp LC(C)       &kp LC(X)     &kp LC(Z)
&kp ESC  &kp LC(A)  &kp LALT   &kp LCTRL  &kp LSHFT  &trans                 &kp K_CONTEXT_MENU  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
         &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LS(LC(Z))          &trans              &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT
                               &trans     &trans     &trans                 &mkp MB3            &mkp LCLK       &mkp RCLK
            >;
        };

        sym {
            bindings = <
             &kp PT_BSLH  &kp PT_SINGLE_QUOTE  &kp PT_GRAVE          &kp PT_ACUTE     &kp PT_SLASH            &kp PT_ORDM  &kp PT_TILDE  &kp PT_CARET  &kp PT_ORDF  &kp PT_ORDF
&kp PT_EURO  &kp PT_PIPE  &kp PT_ASTRK         &kp PT_AMPS           &kp PT_QUESTION  &kp PT_PERCENT          &trans       &kp LSHFT     &kp RCTRL     &kp LALT     &kp LGUI     &trans
             &kp PT_AT    &kp PT_EXCL          &kp PT_DOUBLE_QUOTES  &kp PT_HASH      &kp PT_DOLLAR           &trans       &trans        &trans        &kp RALT     &trans  
                                               &trans                &trans           &trans                  &trans       &trans        &trans
            >;
        };

        fun {
            bindings = <
        &kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN          &trans  &trans     &trans     &trans    &trans  
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp INSERT               &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp LGUI  &trans
        &kp F10  &kp F1  &kp F2  &kp F3  &trans                   &trans  &trans     &trans     &trans    &trans  
                         &none   &none   &trans                   &trans  &trans     &trans
            >;
        };

        bluetooth {
            bindings = <
                &bt BT_CLR_ALL &trans        &trans        &bt BT_PRV    &bt BT_NXT            &trans     &trans  &trans  &trans  &trans 
&trans          &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &trans     &trans  &trans  &trans  &trans  &trans
                &out OUT_TO    &trans        &trans        &trans        &trans                &soft_off  &trans  &trans  &trans  &trans
                                             &trans        &trans        &trans                &trans     &trans  &trans
            >;
        };

        none_l {
            bindings = <
       &none  &none  &none  &none  &none         &none  &none  &none  &none  &none 
&none  &none  &none  &none  &none  &none         &none  &none  &none  &none  &none  &none
       &none  &none  &none  &none  &none         &none  &none  &none  &none  &none 
                     &none  &none  &none         &none  &none  &none
            >;
        };
    };
};
