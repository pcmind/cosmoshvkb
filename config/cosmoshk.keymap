/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include "keys_pt.h"

/ {
    combos {
        compatible = "zmk,combos";

        lessthan {
            bindings = <&kp PT_LESS_THAN>;
            key-positions = <2 3>;
        };

        openbrace {
            bindings = <&kp PT_LEFT_BRACE>;
            key-positions = <3 4>;
        };

        openparent {
            bindings = <&kp PT_LEFT_PARENTHESIS>;
            key-positions = <28 27>;
        };

        openbraket {
            bindings = <&kp PT_LEFT_BRACKET>;
            key-positions = <26 27>;
        };

        closebrace {
            bindings = <&kp PT_RIGHT_BRACE>;
            key-positions = <7 8>;
        };

        closegreater {
            bindings = <&kp PT_GREATER_THAN>;
            key-positions = <8 9>;
        };

        closeparent {
            bindings = <&kp PT_RIGHT_PARENTHESIS>;
            key-positions = <31 32>;
        };

        closebrack {
            bindings = <&kp PT_RIGHT_BRACKET>;
            key-positions = <32 33>;
        };

        bluetoothlayer {
            bindings = <&mo 6>;
            key-positions = <43 44 45>;
        };
    };

    behaviors {
        hrml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 18 20 19 30 31 32 21 33 34 22 23>;
            require-prior-idle-ms = <150>;
        };

        sfthold: sticky_or_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_OR_HOLD";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "balanced";
        };

        hrmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOES_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <1 2 3 13 14 15 4 5 17 16 26 25 27 28 29>;
            require-prior-idle-ms = <150>;
        };

        stikfun: stikfun {
            compatible = "zmk,behavior-hold-tap";
            label = "STIKFUN";
            bindings = <&lt>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <180>;
            flavor = "hold-preferred";
            hold-while-undecided;
        };

        fun_layer: fun_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "FUN_LAYER";
            #binding-cells = <0>;
            bindings = <&sl 5>, <&mo 5>, <&tog 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |  ESC  |
            // | BSPC  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   Ã‡   |  ~    |
            // |  GUI  |  Z  |  X  |  C   |  V   |  B   |                   |  N   |  M    |  ,    |  .   |   -   |  GUI  |
            //               | LFT | RGT  |                                                |  UP   |  DWN |
            //                     | CTRL | SPC  | MOUS |                   | RSE  |  ENT  |  SPC  |
            //                            | ENT  | L_1  |                   | LWR  |  GUI  |

            bindings = <
&kp ESC        &kp Q  &kp W         &kp E             &kp R          &kp T                    &kp Y        &kp U                &kp I                           &kp O             &kp P             &kp DEL
&kp BACKSPACE  &kp A  &hrml LALT S  &hrml LCTRL D     &hrml LSHFT F  &kp G                    &kp H        &hrmr RIGHT_SHIFT J  &hrmr RCTRL K                   &hrmr LEFT_ALT L  &kp PT_C_CEDILLA  &kp PT_TILDE
&kp LEFT_GUI   &kp Z  &kp X         &kp C             &kp V          &kp B                    &kp N        &kp M                &kp COMMA                       &kp DOT           &kp SLASH         &kp RIGHT_GUI
                      &kp UP_ARROW  &kp DOWN_ARROW                                                                              &kp LEFT_ARROW                  &kp RIGHT_ARROW
                                    &kp LEFT_CONTROL  &lt 1 SPACE    &lt 3 TAB                &lt 4 ENTER  &lt 2 BACKSPACE      &sfthold LEFT_SHIFT LEFT_SHIFT
                                                      &kp RETURN     &fun_layer  &key_repeat  &caps_word
            >;
        };

        arrows {
            bindings = <
&kp ESCAPE  &trans        &kp LC(RA(LEFT))        &kp LC(LA(RIGHT))  &trans          &trans                 &kp LS(LC(Z))  &kp LC(V)  &kp LC(C)       &kp LC(X)     &kp LC(Z)  &kp DEL
&trans      &kp LEFT_GUI  &kp LEFT_ALT            &kp LEFT_CONTROL   &kp LEFT_SHIFT  &trans                 &kp CLCK       &kp LEFT   &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans
&trans      &kp LC(Z)     &kp LC(X)               &kp LC(C)          &kp LC(V)       &kp LC(LS(Z))          &kp INS        &kp HOME   &kp PAGE_DOWN   &kp PAGE_UP   &kp END    &trans
                          &kp LC(LG(LEFT_ARROW))  &kp LC(LG(RIGHT))                                                                   &trans          &trans
                                                  &trans             &trans          &trans                 &trans         &trans     &trans
                                                                     &trans          &trans         &trans  &trans
            >;
        };

        num {
            bindings = <
&trans  &kp COMMA     &kp N7  &kp N8  &kp N9     &kp PT_FSLH           &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp PT_MINUS  &kp N4  &kp N5  &kp N6     &kp PT_PLUS           &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp PT_EQUAL  &kp N1  &kp N2  &kp N3     &kp PT_ASTRK          &trans  &trans     &trans     &kp RALT  &trans    &trans
                      &trans  &trans                                                      &trans     &trans
                              &trans  &kp PT_N0  &kp PERIOD            &trans  &trans     &trans
                                      &trans     &trans        &trans  &trans
            >;
        };

        mouse {
            bindings = <
&kp ESC  &trans     &trans     &kp LC(E)  &trans     &trans                 &kp LS(LC(Z))       &kp LC(V)       &kp LC(C)       &kp LC(X)     &kp LC(Z)        &trans
&trans   &kp LC(A)  &kp LALT   &kp LCTRL  &kp LSHFT  &trans                 &kp K_CONTEXT_MENU  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans   &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LS(LC(Z))          &trans              &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                    &trans     &trans                                                                           &trans          &trans
                               &trans     &trans     &trans                 &mkp MB3            &mkp LCLK       &mkp RCLK
                                          &trans     &trans         &trans  &trans
            >;
        };

        sym {
            bindings = <
&trans       &kp PT_BSLH  &kp PT_SINGLE_QUOTE  &kp PT_GRAVE          &kp PT_ACUTE     &kp PT_SLASH            &kp PT_ORDM  &kp PT_TILDE  &kp PT_CARET  &kp PT_ORDF  &kp PT_ORDF  &trans
&kp PT_EURO  &kp PT_PIPE  &kp PT_ASTRK         &kp PT_AMPS           &kp PT_QUESTION  &kp PT_PERCENT          &trans       &kp LSHFT     &kp RCTRL     &kp LALT     &kp LGUI     &trans
&trans       &kp PT_AT    &kp PT_EXCL          &kp PT_DOUBLE_QUOTES  &kp PT_HASH      &kp PT_DOLLAR           &trans       &trans        &trans        &kp RALT     &trans       &trans
                          &trans               &trans                                                                                    &trans        &trans
                                               &trans                &trans           &trans                  &trans       &trans        &trans
                                                                     &trans           &trans          &trans  &trans
            >;
        };

        fun {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp INSERT               &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans                   &trans  &trans     &trans     &trans    &trans    &trans
                 &trans  &trans                                                      &trans     &trans
                         &none   &none   &trans                   &trans  &trans     &trans
                                 &trans  &trans           &trans  &trans
            >;
        };

        bluetooth {
            bindings = <
&bt BT_CLR_ALL  &bt BT_PRV  &bt BT_PRV  &trans  &trans  &trans             &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans      &trans      &trans  &trans  &trans             &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans      &trans      &trans  &trans  &soft_off          &trans  &trans  &trans  &trans  &trans  &trans
                            &trans      &trans                                             &trans  &trans
                                        &trans  &trans  &trans             &trans  &trans  &trans
                                                &trans  &trans     &trans  &trans
            >;
        };
    };
};
